// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/yc-actions/sourcecraft-actions/pkg/storage"
)

// NewMockStorageService creates a new instance of MockStorageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorageService {
	mock := &MockStorageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStorageService is an autogenerated mock type for the StorageService type
type MockStorageService struct {
	mock.Mock
}

type MockStorageService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorageService) EXPECT() *MockStorageService_Expecter {
	return &MockStorageService_Expecter{mock: &_m.Mock}
}

// ClearBucket provides a mock function for the type MockStorageService
func (_mock *MockStorageService) ClearBucket(ctx context.Context, bucketName string) error {
	ret := _mock.Called(ctx, bucketName)

	if len(ret) == 0 {
		panic("no return value specified for ClearBucket")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, bucketName)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorageService_ClearBucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearBucket'
type MockStorageService_ClearBucket_Call struct {
	*mock.Call
}

// ClearBucket is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
func (_e *MockStorageService_Expecter) ClearBucket(ctx interface{}, bucketName interface{}) *MockStorageService_ClearBucket_Call {
	return &MockStorageService_ClearBucket_Call{Call: _e.mock.On("ClearBucket", ctx, bucketName)}
}

func (_c *MockStorageService_ClearBucket_Call) Run(run func(ctx context.Context, bucketName string)) *MockStorageService_ClearBucket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorageService_ClearBucket_Call) Return(err error) *MockStorageService_ClearBucket_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorageService_ClearBucket_Call) RunAndReturn(run func(ctx context.Context, bucketName string) error) *MockStorageService_ClearBucket_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteObjects provides a mock function for the type MockStorageService
func (_mock *MockStorageService) DeleteObjects(ctx context.Context, bucketName string, objectKeys []string) (int, error) {
	ret := _mock.Called(ctx, bucketName, objectKeys)

	if len(ret) == 0 {
		panic("no return value specified for DeleteObjects")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) (int, error)); ok {
		return returnFunc(ctx, bucketName, objectKeys)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) int); ok {
		r0 = returnFunc(ctx, bucketName, objectKeys)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = returnFunc(ctx, bucketName, objectKeys)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorageService_DeleteObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteObjects'
type MockStorageService_DeleteObjects_Call struct {
	*mock.Call
}

// DeleteObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - objectKeys []string
func (_e *MockStorageService_Expecter) DeleteObjects(ctx interface{}, bucketName interface{}, objectKeys interface{}) *MockStorageService_DeleteObjects_Call {
	return &MockStorageService_DeleteObjects_Call{Call: _e.mock.On("DeleteObjects", ctx, bucketName, objectKeys)}
}

func (_c *MockStorageService_DeleteObjects_Call) Run(run func(ctx context.Context, bucketName string, objectKeys []string)) *MockStorageService_DeleteObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStorageService_DeleteObjects_Call) Return(n int, err error) *MockStorageService_DeleteObjects_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockStorageService_DeleteObjects_Call) RunAndReturn(run func(ctx context.Context, bucketName string, objectKeys []string) (int, error)) *MockStorageService_DeleteObjects_Call {
	_c.Call.Return(run)
	return _c
}

// GetObject provides a mock function for the type MockStorageService
func (_mock *MockStorageService) GetObject(ctx context.Context, bucketName string, objectName string) (*storage.StorageObject, error) {
	ret := _mock.Called(ctx, bucketName, objectName)

	if len(ret) == 0 {
		panic("no return value specified for GetObject")
	}

	var r0 *storage.StorageObject
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*storage.StorageObject, error)); ok {
		return returnFunc(ctx, bucketName, objectName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *storage.StorageObject); ok {
		r0 = returnFunc(ctx, bucketName, objectName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.StorageObject)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, bucketName, objectName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorageService_GetObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObject'
type MockStorageService_GetObject_Call struct {
	*mock.Call
}

// GetObject is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - objectName string
func (_e *MockStorageService_Expecter) GetObject(ctx interface{}, bucketName interface{}, objectName interface{}) *MockStorageService_GetObject_Call {
	return &MockStorageService_GetObject_Call{Call: _e.mock.On("GetObject", ctx, bucketName, objectName)}
}

func (_c *MockStorageService_GetObject_Call) Run(run func(ctx context.Context, bucketName string, objectName string)) *MockStorageService_GetObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStorageService_GetObject_Call) Return(storageObject *storage.StorageObject, err error) *MockStorageService_GetObject_Call {
	_c.Call.Return(storageObject, err)
	return _c
}

func (_c *MockStorageService_GetObject_Call) RunAndReturn(run func(ctx context.Context, bucketName string, objectName string) (*storage.StorageObject, error)) *MockStorageService_GetObject_Call {
	_c.Call.Return(run)
	return _c
}

// ListObjects provides a mock function for the type MockStorageService
func (_mock *MockStorageService) ListObjects(ctx context.Context, bucketName string, maxKeys int32, continuationToken string) ([]string, string, bool, error) {
	ret := _mock.Called(ctx, bucketName, maxKeys, continuationToken)

	if len(ret) == 0 {
		panic("no return value specified for ListObjects")
	}

	var r0 []string
	var r1 string
	var r2 bool
	var r3 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int32, string) ([]string, string, bool, error)); ok {
		return returnFunc(ctx, bucketName, maxKeys, continuationToken)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int32, string) []string); ok {
		r0 = returnFunc(ctx, bucketName, maxKeys, continuationToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int32, string) string); ok {
		r1 = returnFunc(ctx, bucketName, maxKeys, continuationToken)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, int32, string) bool); ok {
		r2 = returnFunc(ctx, bucketName, maxKeys, continuationToken)
	} else {
		r2 = ret.Get(2).(bool)
	}
	if returnFunc, ok := ret.Get(3).(func(context.Context, string, int32, string) error); ok {
		r3 = returnFunc(ctx, bucketName, maxKeys, continuationToken)
	} else {
		r3 = ret.Error(3)
	}
	return r0, r1, r2, r3
}

// MockStorageService_ListObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListObjects'
type MockStorageService_ListObjects_Call struct {
	*mock.Call
}

// ListObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - maxKeys int32
//   - continuationToken string
func (_e *MockStorageService_Expecter) ListObjects(ctx interface{}, bucketName interface{}, maxKeys interface{}, continuationToken interface{}) *MockStorageService_ListObjects_Call {
	return &MockStorageService_ListObjects_Call{Call: _e.mock.On("ListObjects", ctx, bucketName, maxKeys, continuationToken)}
}

func (_c *MockStorageService_ListObjects_Call) Run(run func(ctx context.Context, bucketName string, maxKeys int32, continuationToken string)) *MockStorageService_ListObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int32
		if args[2] != nil {
			arg2 = args[2].(int32)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockStorageService_ListObjects_Call) Return(strings []string, s string, b bool, err error) *MockStorageService_ListObjects_Call {
	_c.Call.Return(strings, s, b, err)
	return _c
}

func (_c *MockStorageService_ListObjects_Call) RunAndReturn(run func(ctx context.Context, bucketName string, maxKeys int32, continuationToken string) ([]string, string, bool, error)) *MockStorageService_ListObjects_Call {
	_c.Call.Return(run)
	return _c
}

// PutObject provides a mock function for the type MockStorageService
func (_mock *MockStorageService) PutObject(ctx context.Context, object *storage.StorageObject) error {
	ret := _mock.Called(ctx, object)

	if len(ret) == 0 {
		panic("no return value specified for PutObject")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *storage.StorageObject) error); ok {
		r0 = returnFunc(ctx, object)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorageService_PutObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutObject'
type MockStorageService_PutObject_Call struct {
	*mock.Call
}

// PutObject is a helper method to define mock.On call
//   - ctx context.Context
//   - object *storage.StorageObject
func (_e *MockStorageService_Expecter) PutObject(ctx interface{}, object interface{}) *MockStorageService_PutObject_Call {
	return &MockStorageService_PutObject_Call{Call: _e.mock.On("PutObject", ctx, object)}
}

func (_c *MockStorageService_PutObject_Call) Run(run func(ctx context.Context, object *storage.StorageObject)) *MockStorageService_PutObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *storage.StorageObject
		if args[1] != nil {
			arg1 = args[1].(*storage.StorageObject)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorageService_PutObject_Call) Return(err error) *MockStorageService_PutObject_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorageService_PutObject_Call) RunAndReturn(run func(ctx context.Context, object *storage.StorageObject) error) *MockStorageService_PutObject_Call {
	_c.Call.Return(run)
	return _c
}
